<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Step 3: Add a Gift Card</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      min-height: 100vh;
    }
    .container {
      display: flex;
      gap: 20px;
      padding: 20px;
      max-width: 1400px;
      margin: 0 auto;
    }
    .gift-card-options {
      flex: 1;
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 12px;
      row-gap: 12px;
      height: fit-content;
    }
    .gift-card-option {
      border: 1px solid #eee;
      padding: 12px;
      border-radius: 8px;
      text-align: center;
      height: fit-content;
      background: #fff;
    }
    .gift-card-option img {
      width: 100%;
      height: 180px;
      object-fit: cover;
      border-radius: 4px;
      margin-bottom: 8px;
      display: block;
    }
    .select-design {
      width: 95%;
      padding: 10px;
      background: #000;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }
    .select-design:hover {
      background: #333;
    }
    .popup-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      display: none;
      justify-content: center;
      align-items: center;
    }
    .popup {
      background: white;
      padding: 20px;
      border-radius: 8px;
      width: 320px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      text-align: left;
      position: relative;
      display: flex;
      flex-direction: column;
      gap: 10px;
      font-family: Arial, sans-serif;
    }
    .popup .close {
      position: absolute;
      top: 10px;
      right: 10px;
      cursor: pointer;
      font-size: 18px;
      font-weight: bold;
    }
    .popup label {
      margin-bottom: 4px;
      display: block;
    }
    .popup label,
    .popup input,
    .popup textarea,
    .popup button {
      font-family: inherit;
      font-size: 14px;
    }
    .popup input,
    .popup textarea {
      width: 100%;
      padding: 8px;
      margin-bottom: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 14px;
    }
    .sticky-cart {
      width: 300px;
      background: #f9f9f9;
      padding: 20px;
      border-radius: 8px;
      position: sticky;
      top: 20px;
      height: calc(100vh - 40px);
      overflow-y: auto;
    }
    .step3 {
      display: flex;
      gap: 20px;
      padding: 20px;
      max-width: 1400px;
      margin: 0 auto;
    }
    .product-info {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 8px;
      font-size: 14px;
    }
    .Popup-title {
      font-weight: bold;
      margin-bottom: 4px;
      display: block;
    }
  </style>
</head>
<body>
  <h2 class="step3">Step 3: Add a Gift Card</h2>
  <div class="container">
    <div class="gift-card-options">
      {% for product in collections['gift-cards'].products %}
      <div class="gift-card-option">
        <img src="{{ product.featured_image | img_url: 'medium' }}" alt="{{ product.title }}" />
        <div class="product-info">
          <span class="product-name">{{ product.title }}</span>
          <span class="product-price">${{ product.price | divided_by: 100 }}</span>
        </div>
        <button
          class="select-design"
          data-product-id="{{ product.variants.first.id }}"
          data-product-title="{{ product.title }}"
          data-product-price="{{ product.price | divided_by: 100 }}"
          data-product-image="{{ product.featured_image | img_url: 'medium' }}"
        >
          Select Design
        </button>
      </div>
      {% endfor %}
    </div>

    <div class="popup-overlay" id="popup-overlay">
      <div class="popup">
        <span class="close" id="popup-close">&times;</span>
        <h3 class="Popup-title">Customize Your Gift Card</h3>
        <textarea id="gift-message" maxlength="200" placeholder="Enter your message (max 200 characters)"></textarea>
        <input type="text" id="gift-from" placeholder="From: Your name" />
        <label for="delivery-date">Select Delivery Date:</label>
        <input type="date" id="delivery-date" />
        <button id="save-button">Save</button>
      </div>
    </div>

    <div class="sticky-cart">
      <h3>Your Gift</h3>
      <div id="cart-items"></div>
      <p><strong>Total:</strong> $<span id="cart-total">0.00</span></p>
      <button type="button" id="checkout-button">Checkout</button>
    </div>
  </div>

  <script>
    // --- Gift Card Popup Logic ---
    const overlay = document.getElementById('popup-overlay');
    const closeBtn = document.getElementById('popup-close');
    const saveBtn = document.getElementById('save-button');
    let selectedProduct = null;

    // The cart will hold items from all steps.
    // Items from Steps 1/2 will include a quantity property.
    // Items added via the popup (Step 3) will have gift card customization details.
    const cart = {};

    // When a gift card is selected, show the popup for customization.
    document.querySelectorAll('.select-design').forEach(button => {
      button.addEventListener('click', function () {
        selectedProduct = {
          id: this.getAttribute('data-product-id'),
          title: this.getAttribute('data-product-title'),
          price: parseFloat(this.getAttribute('data-product-price')),
          image: this.getAttribute('data-product-image')
        };
        overlay.style.display = 'flex';
      });
    });

    closeBtn.addEventListener('click', function () {
      overlay.style.display = 'none';
    });

    saveBtn.addEventListener('click', function () {
  const message = document.getElementById('gift-message').value;
  const fromName = document.getElementById('gift-from').value;
  const deliveryDate = document.getElementById('delivery-date').value;

  if (!message || !fromName || !deliveryDate) {
    alert('Please fill out all fields.');
    return;
  }

  // Create the gift card item
  const payload = {
    items: [
      {
        id: selectedProduct.id,
        quantity: 1,
        properties: {
          'Gift Message': message,
          'From': fromName,
          'Delivery Date': deliveryDate
        }
      }
    ]
  };

  // Use /cart/add.js to add the gift card to the existing cart
  fetch('/cart/add.js', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload)
  })
    .then(response => response.json())
    .then(data => {
      addToCart(selectedProduct.id, selectedProduct.title, selectedProduct.price, selectedProduct.image, message, fromName, deliveryDate);
      overlay.style.display = 'none';
      console.log('Cart after adding:', data);  // Debugging the cart contents
    })
    .catch(error => alert('Failed to add to cart'));
});



    function addToCart(id, title, price, image, message = '', fromName = '', deliveryDate = '') {
      // For consistency, if the item already exists, you might merge or override as needed.
      // Here, gift card items (with message/fromName/deliveryDate) are treated separately.
      cart[id] = { title, price, image, message, fromName, deliveryDate };
      updateStickyCart();
    }

    function updateStickyCart() {
      const cartItemsContainer = document.getElementById('cart-items');
      cartItemsContainer.innerHTML = '';
      let total = 0;

      Object.values(cart).forEach(item => {
        // If the item has a quantity property, assume it comes from Steps 1/2.
        if (item.hasOwnProperty('quantity')) {
          const subtotal = item.price * item.quantity;
          total += subtotal;
          cartItemsContainer.innerHTML += `
            <div style="margin-bottom:10px; display: flex; align-items: center; gap: 10px;">
              <img src="${item.image}" width="50" style="vertical-align:middle;"> 
              <div>
                <strong>${item.title}</strong><br>
                <span>Quantity: ${item.quantity}</span><br>
                <span>Subtotal: $${subtotal.toFixed(2)}</span>
              </div>
            </div>
          `;
        } else {
          // Otherwise, assume it's a gift card item from Step 3.
          total += item.price; // Quantity is assumed to be 1.
          cartItemsContainer.innerHTML += `
            <div style="margin-bottom:10px; display: flex; align-items: center; gap: 10px;">
              <img src="${item.image}" width="50" style="vertical-align:middle;"> 
              <div>
                <strong>${item.title}</strong><br>
                ${item.message ? 'Message: ' + item.message + '<br>' : ''}
                ${item.fromName ? 'From: ' + item.fromName + '<br>' : ''}
                ${item.deliveryDate ? 'Delivery: ' + item.deliveryDate + '<br>' : ''}
              </div>
            </div>
          `;
        }
      });

      document.getElementById('cart-total').textContent = total.toFixed(2);
    }

    // --- Extracting URL Parameters from Previous Steps ---
      function populateCartFromURL() {
  const params = new URLSearchParams(window.location.search);
  console.log('All URL params:', Object.fromEntries(params.entries()));

  // Add the gift box from Step 1 if available.
  const boxId = params.get('box_id');
  const boxTitle = decodeURIComponent(params.get('box_title') || '');
  const boxPrice = parseFloat(params.get('box_price')) || 0;
  const boxImage = decodeURIComponent(params.get('box_image') || '');
  if (boxId && boxTitle && boxPrice && boxImage) {
    // We assume a quantity of 1 for the gift box.
    cart[boxId] = {
      title: boxTitle,
      price: boxPrice,
      image: boxImage,
      quantity: 1
    };
  }

  // Add gift products from Step 2 if available.
  const productIds = params.getAll('product_id[]');
  const quantities = params.getAll('quantity[]');
  const productTitles = params.getAll('product_title[]');
  const productImages = params.getAll('product_image[]');
  const productPrices = params.getAll('product_price[]');

  for (let i = 0; i < productIds.length; i++) {
    const id = productIds[i];
    const quantity = parseInt(quantities[i]) || 1;
    const title = decodeURIComponent(productTitles[i] || `Gift Product ${id}`);
    const image = decodeURIComponent(productImages[i] || '');
    const price = parseFloat(productPrices[i]) || 0;

    if (!cart[id]) {
      cart[id] = {
        title: title,
        price: price,
        image: image,
        quantity: quantity
      };
    } else {
      // Update the quantity if the product already exists in the cart.
      cart[id].quantity = (cart[id].quantity || 1) + quantity;
    }
  }
  updateStickyCart();
}


    // Run the population function on page load.
    document.addEventListener('DOMContentLoaded', populateCartFromURL);

    // Handler for the checkout button.
    document.getElementById('checkout-button').addEventListener('click', function () {
  const payload = {
    items: []
  };

  // Iterate through all items in the local cart object and prepare the payload.
  Object.values(cart).forEach(item => {
    const itemData = {
      id: item.id,
      quantity: item.quantity || 1,
      properties: {}
    };

    // Add custom properties if present (for gift cards).
    if (item.message) itemData.properties['Gift Message'] = item.message;
    if (item.fromName) itemData.properties['From'] = item.fromName;
    if (item.deliveryDate) itemData.properties['Delivery Date'] = item.deliveryDate;

    payload.items.push(itemData);
  });

  // Add all items to Shopify's cart before checkout.
  fetch('/cart/add.js', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload)
  })
    .then(response => response.json())
    .then(data => {
      console.log('Cart updated before checkout:', data);
      // Redirect to checkout
      window.location.href = '/checkout';
    })
    .catch(error => alert('Failed to add items to cart before checkout'));
});
  </script>
</body>
</html>
