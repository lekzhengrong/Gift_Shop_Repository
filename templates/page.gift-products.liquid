<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Gift Products</title>
    <style>
        .product-options { display: flex; gap: 20px; flex-wrap: wrap; }
        .product-option { text-align: center; width: 150px; }
        .product-option img { width: 150px; height: auto; }
    </style>
</head>
<body>
    <h2>Step 2: Choose Products</h2>
    <form id="gift-selection-form">
        <!-- Hidden input for the selected gift box -->
        <input type="hidden" name="id" id="box-id" value="">

        <div class="product-options">
            {% for product in collections['gift-products'].products %}
                {% for variant in product.variants %}
                    <div class="product-option">
                        <input type="checkbox" id="variant-{{ variant.id }}" name="items[]" value="{{ variant.id }}">
                        <label for="variant-{{ variant.id }}">
                            <img src="{{ product.featured_image | img_url: 'medium' }}" alt="{{ product.title }}">
                            <p>{{ product.title }} ({{ variant.title }})</p>
                        </label>
                    </div>
                {% endfor %}
            {% endfor %}
        </div>
        <button type="button" id="add-to-cart" class="add-to-cart-button">Add to Cart</button>
    </form>
        
    <script>
    /**
     * Fetch the default variant ID for a product without variants
     */
    function getDefaultVariantId(productId) {
        // Shopify automatically assigns a default variant for every product
        // Map product ID to variant ID (mock example)
        const productToVariantMap = {
            // Replace these mappings with your actual product-to-variant mappings
            '14894347583857': '14900734755185', // Example: Map Product ID to Default Variant ID
        };

        return productToVariantMap[productId] || null;
    }

    /**
     * Add selected products and gift box to the cart
     */
    async function addToCart() {
        const boxId = document.getElementById('box-id').value;
        if (!boxId) {
            alert("No gift box selected. Please return to the previous page.");
            return;
        }

        const selectedProducts = document.querySelectorAll('input[name="items[]"]:checked');
        if (selectedProducts.length === 0) {
            alert("Please select at least one product to add to the box.");
            return;
        }

        const items = [
            { id: parseInt(boxId), quantity: 1 }, // Add the gift box
            ...Array.from(selectedProducts).map(product => {
                // Get the variant ID (default to product ID mapping)
                const productId = product.value;
                const variantId = getDefaultVariantId(productId);

                if (!variantId) {
                    console.error(`Variant ID not found for Product ID: ${productId}`);
                    return null;
                }

                return {
                    id: parseInt(variantId), // Ensure ID is an integer
                    quantity: 1,
                };
            }).filter(Boolean) // Remove null entries
        ];

        console.log("Items to be added to cart:", items);

        try {
            const response = await fetch('/cart/add.js', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ items }),
            });

            if (response.ok) {
                const data = await response.json();
                console.log("Cart updated successfully:", data);
                window.location.href = '/cart'; // Redirect to the cart page
            } else {
                const error = await response.json();
                console.error("Error adding items to cart:", error);
                alert("An error occurred while adding items to the cart. Please try again.");
            }
        } catch (error) {
            console.error("Network error:", error);
            alert("An error occurred. Please check your connection and try again.");
        }
    }

    // Attach the add-to-cart functionality to the button
    document.getElementById('add-to-cart').addEventListener('click', addToCart);
</script>

    
</body>
</html>
