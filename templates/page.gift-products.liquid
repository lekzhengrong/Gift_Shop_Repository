<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zach Theme Store</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: row; /* Ensures the layout accommodates the sticky cart on the side */
        }

        .product-options {
            display: grid;
            grid-template-columns: repeat(4, 1fr); /* 4 products per row */
            gap: 20px;
            padding: 20px;
            flex: 1; /* Allow this section to take up remaining space */
        }

        .product-option {
            box-sizing: border-box;
            text-align: center;
            position: relative;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 8px;
            background-color: #fff;
        }

        .product-option img {
            width: 100%;
            height: auto;
            border-radius: 8px;
        }

        .quantity-controls {
            display: none;
            justify-content: center;
            align-items: center;
            gap: 10px;
            margin: 10px 0;
        }

        .quantity-controls button {
            width: 30px;
            height: 30px;
            font-size: 16px;
        }

        .product-option button.add-to-box {
            margin: 10px auto;
            display: block;
            background-color: #000;
            color: #fff;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
        }

        .product-details {
            margin-top: 10px;
        }

        .sticky-cart {
            position: sticky;
            top: 20px;
            width: 300px;
            padding: 20px;
            background-color: #fff;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            border-radius: 8px;
            flex-shrink: 0; /* Prevent shrinking */
        }

        .sticky-cart h3 {
            margin-top: 0;
        }

        .cart-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .cart-item img {
            width: 50px;
            height: auto;
        }

        .cart-item-controls {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .cart-item-controls button {
            width: 30px;
            height: 30px;
            font-size: 16px;
        }

        .cart-summary {
            margin-top: 20px;
        }

        @media (max-width: 768px) {
            .product-options {
                grid-template-columns: repeat(2, 1fr); /* Adjust to 2 products per row on smaller screens */
            }

            .sticky-cart {
                width: 100%; /* Full width for sticky cart on small screens */
                position: static; /* Move to static for better usability */
                margin-top: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="product-options">
        {% for product in collections['gift-products'].products %}
            <div class="product-option">
                <img src="{{ product.featured_image | img_url: 'medium' }}" alt="{{ product.title }}">
                <div class="quantity-controls" data-id="{{ product.variants.first.id }}">
                    <button type="button" class="decrease-quantity">-</button>
                    <span class="quantity-display" data-id="{{ product.variants.first.id }}">1</span>
                    <button type="button" class="increase-quantity">+</button>
                </div>
                <button type="button" class="add-to-box" data-id="{{ product.variants.first.id }}" data-title="{{ product.title }}" data-price="{{ product.price | divided_by: 100 }}" data-image="{{ product.featured_image | img_url: 'medium' }}">Add to Box</button>
                <div class="product-details">
                    <p class="product-name">{{ product.title }}</p>
                    <p class="product-price">${{ product.price | divided_by: 100 }}</p>
                </div>
            </div>
        {% endfor %}
    </div>

    <div class="sticky-cart">
        <h3>Your Gift</h3>
        <div id="cart-items"></div>
        <div class="cart-summary">
            <p><strong>Total:</strong> $<span id="cart-total">0.00</span></p>
            <button type="button" id="checkout-button">Checkout</button>
        </div>
    </div>

    <script>
        const cart = {};

        function toggleQuantityControls(productId) {
            const addButton = document.querySelector(`.add-to-box[data-id="${productId}"]`);
            const quantityControls = document.querySelector(`.quantity-controls[data-id="${productId}"]`);
            if (addButton && quantityControls) {
                addButton.style.display = 'none';
                quantityControls.style.display = 'flex';
            }
        }

        function resetQuantityControls(productId) {
            const addButton = document.querySelector(`.add-to-box[data-id="${productId}"]`);
            const quantityControls = document.querySelector(`.quantity-controls[data-id="${productId}"]`);
            if (addButton && quantityControls) {
                addButton.style.display = 'block';
                quantityControls.style.display = 'none';
            }
        }

        function addToCart(productId, title, price, image, quantity = 1) {
            if (quantity <= 0) return;

            if (!cart[productId]) {
                cart[productId] = { title, price, quantity, image };
            } else {
                cart[productId].quantity += quantity;
            }
            updateStickyCart();
        }

        function updateStickyCart() {
            const cartItemsContainer = document.getElementById('cart-items');
            cartItemsContainer.innerHTML = '';
            let total = 0;

            Object.keys(cart).forEach(productId => {
                const { title, price, quantity, image } = cart[productId];
                total += price * quantity;

                const cartItem = document.createElement('div');
                cartItem.className = 'cart-item';
                cartItem.innerHTML = `
                    <img src="${image}" alt="${title}">
                    <div>${title}</div>
                    <div class="cart-item-controls">
                        <button type="button" class="decrease-cart-quantity" data-id="${productId}">-</button>
                        <span>${quantity}</span>
                        <button type="button" class="increase-cart-quantity" data-id="${productId}">+</button>
                        <button type="button" class="remove-cart-item" data-id="${productId}">x</button>
                    </div>
                    <div>$${(price * quantity).toFixed(2)}</div>
                `;
                cartItemsContainer.appendChild(cartItem);
            });

            document.getElementById('cart-total').textContent = total.toFixed(2);
        }

        document.addEventListener('click', (event) => {
            const { target } = event;

            if (target.classList.contains('add-to-box')) {
                const productId = target.dataset.id;
                toggleQuantityControls(productId);
                addToCart(productId, target.dataset.title, parseFloat(target.dataset.price), target.dataset.image);
            }

            if (target.classList.contains('decrease-quantity')) {
                const productId = target.closest('.quantity-controls').dataset.id;
                const display = target.nextElementSibling;
                const quantity = parseInt(display.textContent, 10);
                if (quantity === 1) {
                    resetQuantityControls(productId);
                } else {
                    display.textContent = quantity - 1;
                    addToCart(productId, '', 0, '', -1);
                }
            }

            if (target.classList.contains('increase-quantity')) {
                const productId = target.closest('.quantity-controls').dataset.id;
                const display = target.previousElementSibling;
                const quantity = parseInt(display.textContent, 10) + 1;
                display.textContent = quantity;
                addToCart(productId, '', 0, '', 1);
            }

            if (target.classList.contains('remove-cart-item')) {
                const productId = target.dataset.id;
                delete cart[productId];
                updateStickyCart();
            }
        });

        document.getElementById('checkout-button').addEventListener('click', () => {
            alert('Proceeding to checkout');
        });
    </script>
</body>
</html>
